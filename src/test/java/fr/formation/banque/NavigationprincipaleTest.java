package fr.formation.banque;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class NavigationprincipaleTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  
  
  @Before
  public void setUp() {
//    driver = new ChromeDriver();
//    js = (JavascriptExecutor) driver;
//    vars = new HashMap<String, Object>();
  }
  
  
  @After
  public void tearDown() {
    driver.quit();
  }
  
  
  @Test
  public void navigationPrincipaleChrome() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    navigationprincipale();
  }
  
  @Test
  public void navigationPrincipaleFirefox() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    navigationprincipale();
  }
  
  private void navigationprincipale() {
    // Test name: navigation principale
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://192.168.18.104/");
    // 2 | setWindowSize | 1047x691 | 
    driver.manage().window().setSize(new Dimension(1047, 691));
    // 3 | click | css=h2 | 
    driver.findElement(By.cssSelector("h2")).click();
    // 4 | click | css=h2 | 
    driver.findElement(By.cssSelector("h2")).click();
    // 5 | assertText | css=h2 | Bienvenue sur votre Banque en ligne !!!
    assertThat(driver.findElement(By.cssSelector("h2")).getText(), is("Bienvenue sur votre Banque en ligne !!!"));
    // 6 | click | linkText=Accès client | 
    driver.findElement(By.linkText("Accès client")).click();
    // 7 | click | id=authIdentifiant | 
    driver.findElement(By.id("authIdentifiant")).click();
    // 8 | assertElementPresent | id=authIdentifiant | 
    {
      List<WebElement> elements = driver.findElements(By.id("authIdentifiant"));
      assert(!elements.size() > 0);
    }
    // 9 | click | id=authMotdepasse | 
    driver.findElement(By.id("authMotdepasse")).click();
    // 10 | assertElementPresent | id=authMotdepasse | 
    {
      List<WebElement> elements = driver.findElements(By.id("authMotdepasse"));
      assert(elements.size() > 0);
    }
    // 11 | assertElementPresent | css=.btn | 
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".btn"));
      assert(elements.size() > 0);
    }
    // 12 | close |  | 
    //inutile car driver teardown dans le code
    //driver.close();
  }
}
